{{template "base" .}}

{{define "content"}}
  <!-- TODO: NEW CONTACT PAGE -->
  <main>
    <section class="py-20">
      <div class="container">
        <div class="flex flex-col justify-center items-align-center mt-16 p-4 text-center lg:text-start bg-gray-100 rounded">
          <div class="flex flex-col md:grid grid-cols-2">
            <div>
              <h1 class="font-bold min-[320px]:text-xl min-[375px]:text-2xl min-[414px]:text-3xl md:text-5xl lg:text-6xl xl-[1500px]:text-7xl]">Contact Us</h1>
              <p class="pb-6 mb:pb-16 pt-8"><span class="text-[var(--secondary-color)]">Have Questions?</span> Email us with any questions you may have in how we can assist you and your clinics’ needs with our carts. </p>
            </div>
            <div class="flex flex-col items-end pt-0 pb-4 md:p-8">
              <div class="flex items-start" title="Address">
                <svg class="mr-3" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" clip-rule="evenodd" width="24" height="24" viewBox="0 0 105 105"><g id="icon-address"><path id="Background" fill="#4c4c8e" d="M86.96,2.76c4.42,-0 8.659,1.756 11.785,4.881c3.126,3.126 4.881,7.365 4.881,11.785l0,66.667c0,4.42 -1.755,8.66 -4.881,11.785c-3.126,3.126 -7.365,4.882 -11.785,4.882l-66.667,-0c-4.42,-0 -8.659,-1.756 -11.785,-4.882c-3.126,-3.125 -4.882,-7.365 -4.882,-11.785l0,-66.667c0,-4.42 1.756,-8.659 4.882,-11.785c3.126,-3.125 7.365,-4.881 11.785,-4.881l66.667,-0Z"/><path id="Curve" fill="#fff" fill-rule="nonzero" stroke="#fff" stroke-width=".42" d="M79.07,54.474c-0.606,-0 -1.212,-0.228 -1.697,-0.626l-23.747,-21.79l-23.746,21.79c-0.97,0.853 -2.484,0.853 -3.453,-0.057c-0.909,-0.91 -0.909,-2.333 0.06,-3.243l25.443,-23.325c0.969,-0.854 2.423,-0.854 3.393,-0l25.443,23.325c0.969,0.853 0.969,2.333 0.06,3.243c-0.484,0.455 -1.151,0.683 -1.756,0.683Zm-5.331,22.187l-0,-22.244c-0,-1.252 -1.091,-2.276 -2.424,-2.276c-1.332,0 -2.423,1.024 -2.423,2.276l0,19.968l-7.572,0l-0,-12.174c-0,-1.65 -1.454,-3.016 -3.211,-3.016l-8.965,0c-1.757,0 -3.211,1.366 -3.211,3.016l-0,12.174l-7.572,0l-0,-19.968c-0,-1.252 -1.091,-2.276 -2.424,-2.276c-1.332,0 -2.423,1.024 -2.423,2.276l0,22.244c0,1.252 1.091,2.276 2.423,2.276l12.419,-0c1.333,-0 2.423,-1.024 2.423,-2.276l0,-12.914l5.755,-0l0,12.914c0,1.252 1.091,2.276 2.423,2.276l12.419,-0c1.333,-0 2.363,-1.024 2.363,-2.276Z"/></g></svg>
                <address class="flex flex-col items-end">
                  <span>9999 Street City</span>
                  <span>State, Zip</span>
                </address>
              </div>
            </div>
          </div>

          <div>

            {{$contact := index .Data "contact"}}

            <form action="" method="POST" novalidate>
              <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">

              <div class="flex flex-col">

                <div class="flex flex-col">
                  <label for="name">Name: {{with .Form.Errors.Get "name"}}<span class="text-red-600">{{.}}{{end}}</span></label>
                  <input id="name" type="text" class="p-2 mb-2 rounded border w-full md:w-1/2" autocomplete="off" name="name" value="{{$contact.Name}}" required>
                </div>
                <div class="flex flex-col">
                  <label for="company">Company <span class="text-[--secondary-color]">(Optional)</span>: {{with .Form.Errors.Get "company"}}<span class="text-red-600">{{.}}{{end}}</span></label>
                  <input id="company" type="text" class="p-2 mb-2 rounded border w-full md:w-1/2" autocomplete="off" name="company" value="{{$contact.Company}}">
                </div>
                <div class="flex flex-col">
                  <label for="email">Email: {{with .Form.Errors.Get "email"}}<span class="text-red-600">{{.}}{{end}}</span></label>
                  <input id="email" type="text" class="p-2 mb-2 rounded border w-full md:w-1/2" autocomplete="off" name="email" value="{{$contact.Email}}" required>
                </div>
                <div class="flex flex-col">
                  <label for="phone">Phone <span class="text-[--secondary-color]">(Optional)</span>: {{with .Form.Errors.Get "phone"}}<span class="text-red-600">{{.}}{{end}}</span></label>
                  <input id="phone" type="text" class="p-2 mb-2 rounded border w-full md:w-1/2" autocomplete="off" name="Phone" value="{{$contact.Phone}}">
                </div>
                <div class="flex flex-col">
                  <label for="message">Message: {{with .Form.Errors.Get "message"}}<span class="text-red-600">{{.}}{{end}}</span></label>
                  <textarea id="message" name="message" class="p-2 mb-3 rounded border w-full" cols="30" rows="10" minlength="250" required>{{$contact.Message}}</textarea>
                  <label id="char-count" class="text-right">100/100</label>
                </div>
                <button type="submit" class="w-full md:w-[100px] inline-block mb-4 md:mb-0 p-4 md:px-4 py-2 bg-[var(--secondary-color)] text-white rounded border hover:bg-transparent hover:border-[var(--secondary-color)] hover:text-[var(--tertiary-color)] transition-all" >Submit</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </section>
  </main>
{{end}}

{{define "js"}}
  <script>
    let textArea = document.getElementById("message")
    let characterCounter = document.getElementById("char-count")
    const minNumOfChars = 0

    function setCounter () {
      let counter = minNumOfChars + textArea.value.length
      characterCounter.textContent = counter + "/100 Minimum"
      if (counter <= 33) {
        characterCounter.style.color = "red";
      } else if (counter > 33 && counter <= 66) {
        characterCounter.style.color = "orange";
      } else if (counter >= 100) {
        characterCounter.style.color = "green";
        characterCounter.textContent = counter + "/100 ✓"
      }
    }
    setCounter()

    const countCharacters = () => {
      let numOfEnteredChars = textArea.value.length
      let counter = minNumOfChars + numOfEnteredChars
      characterCounter.textContent = counter + "/100 Minimum"
      if (counter <= 33) {
        characterCounter.style.color = "red";
      } else if (counter > 33 && counter <= 66) {
        characterCounter.style.color = "orange";
      } else if (counter >= 100) {
        characterCounter.style.color = "green";
        characterCounter.textContent = counter + "/100 ✓"
      }
    }
    textArea.addEventListener("input", countCharacters)
  </script>
{{end}}